from matplotlib.pyplot import get
from surprise import Dataset,accuracy, NormalPredictor, Reader,SVD, KNNWithMeans,KNNBasic, KNNWithZScore
from surprise.model_selection import cross_validate, train_test_split,KFold
import heapq
import pandas as pd
from collections import defaultdict
from operator import itemgetter


def precision_recall_at_k(predictions, k=10, threshold=0.5):
    """Return precision and recall at k metrics for each user"""

    # First map the predictions to each user.
    user_est_true = defaultdict(list)
    for  uid,_, true_r, est, _ in predictions:
        user_est_true[uid].append((est, true_r))
    #print(user_est_true)
    #display(user_est_true)

    precisions = dict()
    recalls = dict()
    for uid, user_ratings in user_est_true.items():

        # Sort user ratings by estimated value
        user_ratings.sort(key=lambda x: x[0], reverse=True)

        # Number of relevant items
        n_rel = sum((true_r >= threshold) for (_, true_r) in user_ratings)
        #print('relevant: ',n_rel)

        # Number of recommended items in top k
        n_rec_k = sum((est >= threshold) for (est, _) in user_ratings[:k])
        #print('recommended: ',n_rec_k)

        # Number of relevant and recommended items in top k
        n_rel_and_rec_k = sum(
            ((true_r >= threshold) and (est >= threshold))
            for (est, true_r) in user_ratings[:k]
        )

        # Precision@K: Proportion of recommended items that are relevant
        # When n_rec_k is 0, Precision is undefined. We here set it to 0.

        precisions[uid] = n_rel_and_rec_k / n_rec_k if n_rec_k != 0 else 0

        # Recall@K: Proportion of relevant items that are recommended
        # When n_rel is 0, Recall is undefined. We here set it to 0.

        recalls[uid] = n_rel_and_rec_k / n_rel if n_rel != 0 else 0

    return precisions, recalls




def predict_and_validate(surprise_df='surprise df'):
    df = pd.read_csv(surprise_df)
    #display(df)
    # A reader is still needed but only the rating_scale param is requiered.
    reader = Reader(rating_scale=(0, 1))
    #print(df.columns)
    # The columns must correspond to user id, item id and ratings (in that order).
    data = Dataset.load_from_df(df[df.columns], reader)
    algo = KNNWithMeans(sim_options={
            'name': 'msd',
            'user_based': True,
            })
            #'min_support':5,
            #'shrinkage':0

    # define a cross-validation iterator
    kf = KFold(n_splits=10)
    for trainset, testset in kf.split(data):
        # train and test algorithm.
        algo.fit(trainset)
        predictions = algo.test(testset)
        precisions, recalls = precision_recall_at_k(predictions, k=10, threshold=0.2)
        print('PRECISION:',sum(prec for prec in precisions.values()) / len(precisions))
        print('RECALL:',sum(rec for rec in recalls.values()) / len(recalls))
        # Compute and print Root Mean Squared Error
        accuracy.rmse(predictions, verbose=True)